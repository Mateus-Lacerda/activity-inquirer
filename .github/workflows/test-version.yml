name: Test Version

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (n√£o criar tag real)'
        required: false
        default: true
        type: boolean

jobs:
  test-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install semver tool
        run: |
          wget -O /tmp/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          chmod +x /tmp/semver
          sudo mv /tmp/semver /usr/local/bin/

      - name: Test version logic
        run: |
          echo "=== Testando l√≥gica de versionamento ==="
          
          # Verificar se h√° tags
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "‚úÖ √öltima tag encontrada: $LAST_TAG"
            
            # Testar commits desde a √∫ltima tag
            COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            echo "üìù Commits desde $LAST_TAG:"
            echo "$COMMITS"
          else
            echo "‚ÑπÔ∏è Nenhuma tag encontrada - seria o primeiro release"
            LAST_TAG="v0.0.0"
            
            # Mostrar todos os commits
            COMMITS=$(git log --oneline)
            echo "üìù Todos os commits:"
            echo "$COMMITS"
          fi
          
          # Determinar tipo de bump
          if echo "$COMMITS" | grep -qiE "(breaking|major|BREAKING CHANGE)"; then
            BUMP_TYPE="major"
            echo "üî¥ Detectado: MAJOR (breaking changes)"
          elif echo "$COMMITS" | grep -qiE "(feat|feature|minor)"; then
            BUMP_TYPE="minor"
            echo "üü° Detectado: MINOR (nova funcionalidade)"
          else
            BUMP_TYPE="patch"
            echo "üü¢ Detectado: PATCH (corre√ß√µes)"
          fi
          
          # Calcular nova vers√£o
          CURRENT_VERSION=${LAST_TAG#v}
          if [ "$CURRENT_VERSION" = "0.0.0" ]; then
            # Primeiro release - come√ßar com 0.1.0
            NEW_VERSION="0.1.0"
          else
            NEW_VERSION=$(semver bump $BUMP_TYPE $CURRENT_VERSION)
          fi
          NEW_TAG="v$NEW_VERSION"
          
          echo ""
          echo "=== Resultado ==="
          echo "Vers√£o atual: $CURRENT_VERSION"
          echo "Tipo de bump: $BUMP_TYPE"
          echo "Nova vers√£o: $NEW_VERSION"
          echo "Nova tag: $NEW_TAG"
          
          if [ "${{ github.event.inputs.dry_run }}" = "false" ]; then
            echo ""
            echo "‚ö†Ô∏è Dry run desabilitado - criaria tag real: $NEW_TAG"
          else
            echo ""
            echo "‚ÑπÔ∏è Dry run ativo - nenhuma tag ser√° criada"
          fi
