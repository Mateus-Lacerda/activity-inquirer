name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu,x86_64-unknown-linux-musl,x86_64-apple-darwin,aarch64-apple-darwin,x86_64-pc-windows-gnu

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build all targets
        run: |
          # Linux GNU
          cargo build --release --target x86_64-unknown-linux-gnu
          
          # Linux musl
          cargo build --release --target x86_64-unknown-linux-musl
          
          # macOS Intel
          cargo build --release --target x86_64-apple-darwin
          
          # macOS Apple Silicon
          cargo build --release --target aarch64-apple-darwin
          
          # Windows
          cargo build --release --target x86_64-pc-windows-gnu

      - name: Prepare binaries for GoReleaser
        run: |
          mkdir -p dist
          
          # Linux GNU
          cp target/x86_64-unknown-linux-gnu/release/acv-inq dist/acv-inq-linux-amd64
          
          # Linux musl
          cp target/x86_64-unknown-linux-musl/release/acv-inq dist/acv-inq-linux-amd64-musl
          
          # macOS Intel
          cp target/x86_64-apple-darwin/release/acv-inq dist/acv-inq-darwin-amd64
          
          # macOS Apple Silicon
          cp target/aarch64-apple-darwin/release/acv-inq dist/acv-inq-darwin-arm64
          
          # Windows
          cp target/x86_64-pc-windows-gnu/release/acv-inq.exe dist/acv-inq-windows-amd64.exe

      - name: Create install scripts
        run: |
          # Linux/macOS install script
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Instalando Activity Inquirer..."
          
          # Detectar sistema
          if [[ "$OSTYPE" == "linux-gnu"* ]]; then
              INSTALL_DIR="$HOME/.local/bin"
              DESKTOP_DIR="$HOME/.local/share/applications"
              ICON_DIR="$HOME/.local/share/icons"
          elif [[ "$OSTYPE" == "darwin"* ]]; then
              INSTALL_DIR="/usr/local/bin"
              DESKTOP_DIR="$HOME/Applications"
              ICON_DIR="$HOME/.local/share/icons"
          else
              echo "❌ Sistema não suportado: $OSTYPE"
              exit 1
          fi
          
          # Criar diretórios
          mkdir -p "$INSTALL_DIR" "$DESKTOP_DIR" "$ICON_DIR"
          
          # Copiar binário
          cp acv-inq "$INSTALL_DIR/"
          chmod +x "$INSTALL_DIR/acv-inq"
          
          echo "✅ Activity Inquirer instalado em $INSTALL_DIR/acv-inq"
          echo ""
          echo "📖 Uso:"
          echo "  acv-inq              # Visualizar atividades"
          echo "  acv-inq --inquiry    # Registrar atividade"
          echo "  acv-inq --settings   # Configurações"
          echo "  acv-inq --daemon     # Modo daemon"
          echo ""
          echo "🎉 Instalação concluída!"
          EOF
          chmod +x install.sh
          
          # Windows install script
          cat > install.bat << 'EOF'
          @echo off
          echo 🚀 Instalando Activity Inquirer...
          
          set INSTALL_DIR=%USERPROFILE%\AppData\Local\Programs\ActivityInquirer
          
          if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"
          
          copy acv-inq.exe "%INSTALL_DIR%\"
          
          echo ✅ Activity Inquirer instalado em %INSTALL_DIR%\acv-inq.exe
          echo.
          echo 📖 Uso:
          echo   acv-inq              # Visualizar atividades
          echo   acv-inq --inquiry    # Registrar atividade
          echo   acv-inq --settings   # Configurações
          echo   acv-inq --daemon     # Modo daemon
          echo.
          echo 🎉 Instalação concluída!
          echo.
          echo ⚠️  Adicione %INSTALL_DIR% ao seu PATH para usar de qualquer lugar
          pause
          EOF

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
