name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux-amd64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            name: darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-amd64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/${{ matrix.target }}/release/acv-inq.exe dist/acv-inq-${{ matrix.name }}.exe
          else
            cp target/${{ matrix.target }}/release/acv-inq dist/acv-inq-${{ matrix.name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: acv-inq-${{ matrix.name }}
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize artifacts
        run: |
          mkdir -p dist
          find artifacts/ -name "acv-inq-*" -type f -exec cp {} dist/ \;
          ls -la dist/

      - name: Create install scripts
        run: |
          # Linux/macOS install script
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 Instalando Activity Inquirer..."

          # Detectar sistema
          if [[ "$OSTYPE" == "linux-gnu"* ]]; then
              INSTALL_DIR="$HOME/.local/bin"
              DESKTOP_DIR="$HOME/.local/share/applications"
              ICON_DIR="$HOME/.local/share/icons"
          elif [[ "$OSTYPE" == "darwin"* ]]; then
              INSTALL_DIR="/usr/local/bin"
              DESKTOP_DIR="$HOME/Applications"
              ICON_DIR="$HOME/.local/share/icons"
          else
              echo "❌ Sistema não suportado: $OSTYPE"
              exit 1
          fi

          # Criar diretórios
          mkdir -p "$INSTALL_DIR" "$DESKTOP_DIR" "$ICON_DIR"

          # Copiar binário
          cp acv-inq "$INSTALL_DIR/"
          chmod +x "$INSTALL_DIR/acv-inq"

          echo "✅ Activity Inquirer instalado em $INSTALL_DIR/acv-inq"
          echo ""
          echo "📖 Uso:"
          echo "  acv-inq              # Visualizar atividades"
          echo "  acv-inq --inquiry    # Registrar atividade"
          echo "  acv-inq --settings   # Configurações"
          echo "  acv-inq --daemon     # Modo daemon"
          echo ""
          echo "🎉 Instalação concluída!"
          EOF
          chmod +x install.sh

          # Windows install script
          cat > install.bat << 'EOF'
          @echo off
          echo 🚀 Instalando Activity Inquirer...

          set INSTALL_DIR=%USERPROFILE%\AppData\Local\Programs\ActivityInquirer

          if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"

          copy acv-inq.exe "%INSTALL_DIR%\"

          echo ✅ Activity Inquirer instalado em %INSTALL_DIR%\acv-inq.exe
          echo.
          echo 📖 Uso:
          echo   acv-inq              # Visualizar atividades
          echo   acv-inq --inquiry    # Registrar atividade
          echo   acv-inq --settings   # Configurações
          echo   acv-inq --daemon     # Modo daemon
          echo.
          echo 🎉 Instalação concluída!
          echo.
          echo ⚠️  Adicione %INSTALL_DIR% ao seu PATH para usar de qualquer lugar
          pause
          EOF

      - name: Create archives
        run: |
          # Linux GNU
          mkdir -p acv-inq-linux-amd64
          cp dist/acv-inq-linux-amd64 acv-inq-linux-amd64/acv-inq
          cp README.md LICENSE install.sh acv-inq-linux-amd64/
          tar -czf acv-inq-linux-amd64.tar.gz acv-inq-linux-amd64/

          # Linux musl
          mkdir -p acv-inq-linux-amd64-musl
          cp dist/acv-inq-linux-amd64-musl acv-inq-linux-amd64-musl/acv-inq
          cp README.md LICENSE install.sh acv-inq-linux-amd64-musl/
          tar -czf acv-inq-linux-amd64-musl.tar.gz acv-inq-linux-amd64-musl/

          # macOS Intel
          mkdir -p acv-inq-darwin-amd64
          cp dist/acv-inq-darwin-amd64 acv-inq-darwin-amd64/acv-inq
          cp README.md LICENSE install.sh acv-inq-darwin-amd64/
          tar -czf acv-inq-darwin-amd64.tar.gz acv-inq-darwin-amd64/

          # macOS Apple Silicon
          mkdir -p acv-inq-darwin-arm64
          cp dist/acv-inq-darwin-arm64 acv-inq-darwin-arm64/acv-inq
          cp README.md LICENSE install.sh acv-inq-darwin-arm64/
          tar -czf acv-inq-darwin-arm64.tar.gz acv-inq-darwin-arm64/

          # Windows
          mkdir -p acv-inq-windows-amd64
          cp dist/acv-inq-windows-amd64.exe acv-inq-windows-amd64/acv-inq.exe
          cp README.md LICENSE install.bat acv-inq-windows-amd64/
          cd acv-inq-windows-amd64 && zip -r ../acv-inq-windows-amd64.zip . && cd ..

      - name: Generate changelog
        id: changelog
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "## Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG.md
          else
            echo "## 🎉 Primeiro Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "Versão inicial do Activity Inquirer com todas as funcionalidades principais." >> CHANGELOG.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          files: |
            acv-inq-linux-amd64.tar.gz
            acv-inq-linux-amd64-musl.tar.gz
            acv-inq-darwin-amd64.tar.gz
            acv-inq-darwin-arm64.tar.gz
            acv-inq-windows-amd64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
