name: Auto Version

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip version]') && !contains(github.event.head_commit.message, 'chore: bump version')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install semver tool
        run: |
          wget -O /tmp/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          chmod +x /tmp/semver
          sudo mv /tmp/semver /usr/local/bin/

      - name: Get current version
        id: current_version
        run: |
          # Tentar pegar a Ãºltima tag
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
            echo "Ãšltima tag encontrada: $LAST_TAG"
          else
            echo "last_tag=v0.0.0" >> $GITHUB_OUTPUT
            echo "Nenhuma tag encontrada, usando v0.0.0 como base"
          fi

      - name: Determine version bump type
        id: version_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "bump_type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Analisar commits para determinar tipo de bump
            LAST_TAG="${{ steps.current_version.outputs.last_tag }}"

            if [ "$LAST_TAG" = "v0.0.0" ]; then
              # Primeiro release - analisar todos os commits
              COMMITS=$(git log --oneline)
              echo "Primeiro release - analisando todos os commits:"
            else
              # Analisar commits desde a Ãºltima tag
              COMMITS=$(git log $LAST_TAG..HEAD --oneline)
              echo "Commits desde a Ãºltima tag $LAST_TAG:"
            fi

            echo "$COMMITS"

            if echo "$COMMITS" | grep -qiE "(breaking|major|BREAKING CHANGE)"; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
              echo "Detectado: MAJOR (breaking changes)"
            elif echo "$COMMITS" | grep -qiE "(feat|feature|minor)"; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
              echo "Detectado: MINOR (nova funcionalidade)"
            else
              echo "bump_type=patch" >> $GITHUB_OUTPUT
              echo "Detectado: PATCH (correÃ§Ãµes)"
            fi
          fi

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.last_tag }}
          BUMP_TYPE=${{ steps.version_type.outputs.bump_type }}

          # Remover 'v' prefix se existir
          CURRENT_VERSION=${CURRENT_VERSION#v}

          # Calcular nova versÃ£o
          if [ "$CURRENT_VERSION" = "0.0.0" ]; then
            # Primeiro release - comeÃ§ar com 0.1.0
            NEW_VERSION="0.1.0"
            echo "Primeiro release - usando versÃ£o inicial: $NEW_VERSION"
          else
            NEW_VERSION=$(semver bump $BUMP_TYPE $CURRENT_VERSION)
          fi

          NEW_TAG="v$NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

          echo "VersÃ£o atual: $CURRENT_VERSION"
          echo "Tipo de bump: $BUMP_TYPE"
          echo "Nova versÃ£o: $NEW_VERSION"
          echo "Nova tag: $NEW_TAG"

      - name: Update Cargo.toml version
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          
          echo "Cargo.toml atualizado para versÃ£o $NEW_VERSION"
          git add Cargo.toml

      - name: Update Cargo.lock
        run: |
          cargo check --quiet
          git add Cargo.lock

      - name: Create version commit
        run: |
          NEW_TAG=${{ steps.new_version.outputs.new_tag }}
          git commit -m "chore: bump version to $NEW_TAG [skip ci]"

      - name: Create and push tag
        run: |
          NEW_TAG=${{ steps.new_version.outputs.new_tag }}
          git tag -a $NEW_TAG -m "Release $NEW_TAG"
          git push origin HEAD:${{ github.ref_name }}
          git push origin $NEW_TAG

      - name: Generate changelog
        id: changelog
        run: |
          NEW_TAG=${{ steps.new_version.outputs.new_tag }}
          LAST_TAG=${{ steps.current_version.outputs.last_tag }}

          echo "## Changelog $NEW_TAG" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md

          # Commits desde a Ãºltima tag (ou todos se for o primeiro)
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            echo "### ðŸŽ‰ Primeiro Release" >> CHANGELOG_TEMP.md
            echo "" >> CHANGELOG_TEMP.md
            git log --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG_TEMP.md
          else
            git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG_TEMP.md
            echo "" >> CHANGELOG_TEMP.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...$NEW_TAG" >> CHANGELOG_TEMP.md
          fi

          # Mostrar changelog
          echo "Changelog gerado:"
          cat CHANGELOG_TEMP.md

      - name: Summary
        run: |
          echo "## ðŸŽ‰ Nova versÃ£o criada!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **VersÃ£o anterior**: ${{ steps.current_version.outputs.last_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Nova versÃ£o**: ${{ steps.new_version.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tipo de bump**: ${{ steps.version_type.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "A tag foi criada e o workflow de release serÃ¡ executado automaticamente." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— [Ver releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
